plugins {
  id 'java'
}

repositories {
	flatDir {
        dirs 'C:/paps/Programs/Java/javaFX/javafx-sdk-17.0.6/lib',
        	'C:/paps/Programs/Java/javaFX/javafx-jmods-17.0.6'
    }
	mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:31.1-jre'

	// Loger slf4j
	implementation 'org.slf4j:slf4j-api:2.0.6'
	implementation 'ch.qos.logback:logback-classic:1.4.5'
		
	implementation project(':appLib')
	
	// test junit 4
	testImplementation 'junit:junit:4.13'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

 
test {
   // junit 4
   useJUnit()
   
   systemProperty 'some.prop', 'value'
   
   // explicitly include or exclude tests
   // exclude 'sfa/**'
   include 'sfa/test/testsuites/**'

   // show standard out and standard error of the test JVM(s) on the console
   testLogging.showStandardStreams = true

   // set heap size for the test JVM(s)
   minHeapSize = "128m"
   maxHeapSize = "512m"

   // set JVM arguments for the test JVM(s)
   jvmArgs '-XX:MaxPermSize=256m'
   
   // listen to events in the test execution lifecycle
   beforeSuite { 
      descriptor -> logger.lifecycle("Running Suite: " + descriptor)
   }
   beforeTest { 
      descriptor -> logger.lifecycle("  - Running test: " + descriptor)
   }
   afterTest { 
      descriptor, result -> logger.lifecycle("  - test: " + descriptor + " rc: " + result.getResultType())
   }
   afterSuite { 
      descriptor, result  -> logger.lifecycle("  Suite: "+ descriptor +" - results: "+ result.getFailedTestCount() +" KO   sur "+result.getTestCount()+" ODT")
   }
}
// oblige gradle a refaire les tests
// ou 
//	 gradle cleanTest test
test.outputs.upToDateWhen {
	false
}
