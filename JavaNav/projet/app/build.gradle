plugins {
  id 'application'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'eclipse'
  id 'org.beryx.jlink' version '2.25.0'
  
  // pour les tests ... adds 'test' task
  id 'java'
}

repositories {
	flatDir {
        dirs 'C:/paps/Programs/Java/javaFX/javafx-sdk-17.0.6/lib',
        	'C:/paps/Programs/Java/javaFX/javafx-jmods-17.0.6'
    }
	mavenCentral()
}

dependencies {
    implementation 'com.google.guava:guava:31.1-jre'

	// Loger slf4j
	implementation 'org.slf4j:slf4j-api:2.0.6'
	implementation 'ch.qos.logback:logback-classic:1.4.5'
	
	// JavaFX
	implementation 'org.openjfx:javafx-base:17.0.6'
	implementation 'org.openjfx:javafx-controls:17.0.6'
	implementation 'org.openjfx:javafx-fxml:17.0.6'
	implementation 'org.openjfx:javafx-graphics:17.0.6'
	implementation 'org.openjfx:javafx-media:17.0.6'
	implementation 'org.openjfx:javafx-swing:17.0.6'
	implementation 'org.openjfx:javafx-web:17.0.6'
	implementation 'org.openjfx:javafx-swt:17.0.6'
	
	// test junit 4
	testImplementation 'junit:junit:4.13'
}


javafx {
	version = "17"
	modules = [ 'javafx.base', 'javafx.swing', 'javafx.graphics', 'javafx.controls', 'javafx.fxml', 'javafx.media', 'javafx.web']
}

eclipse {
    classpath {
        file {
            whenMerged {
                entries.findAll { isModule(it) }.each { it.entryAttributes['module'] = 'true' }
            }
        }
    }
}
boolean isModule(entry) {
    // filter java 9 modules
	entry.kind == 'lib'  // Only libraries can be modules
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}



application {
    mainClass = 'sfa.nav.starter'
    mainModule = 'sfa.nav.ui'
}

jlink {
    launcher {
        name = 'hellofx'
    }
}

task printJars {
        doLast {
            Set<String> printed = new HashSet<>()
            configurations.each {
                if (it.canBeResolved) {
                    it.files.each {
                        if (!printed.contains(it)) {
                            println it
                            printed.add(it)
                        }
                    }
                }
            }
        }
    }
 
test {
	useJUnit
	
   systemProperty 'some.prop', 'value'
   
   // explicitly include or exclude tests
   include 'org/foo/**'
   exclude 'org/boo/**'

   // show standard out and standard error of the test JVM(s) on the console
   testLogging.showStandardStreams = true

   // set heap size for the test JVM(s)
   minHeapSize = "128m"
   maxHeapSize = "512m"

   // set JVM arguments for the test JVM(s)
   jvmArgs '-XX:MaxPermSize=256m'
   
   // listen to events in the test execution lifecycle
   beforeTest { 
      descriptor -> logger.lifecycle("Running test: " + descriptor)
   }

   // listen to standard out and standard error of the test JVM(s)
   onOutput { 
      descriptor, event -> logger.lifecycle
         ("Test: " + descriptor + " produced standard out/err: " 
         + event.message )
   }
}